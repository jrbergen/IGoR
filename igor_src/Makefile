# Makefile.in generated by automake 1.16.1 from Makefile.am.
# igor_src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2018 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/igor
pkgincludedir = $(includedir)/igor
pkglibdir = $(libdir)/igor
pkglibexecdir = $(libexecdir)/igor
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
bin_PROGRAMS = igor$(EXEEXT)
subdir = igor_src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/m4/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__objects_1 = igor-Aligner.$(OBJEXT) \
	igor-Bestscenarioscounter.$(OBJEXT) igor-CDR3SeqData.$(OBJEXT) \
	igor-Counter.$(OBJEXT) igor-Coverageerrcounter.$(OBJEXT) \
	igor-Deletion.$(OBJEXT) igor-Dinuclmarkov.$(OBJEXT) \
	igor-Errorscounter.$(OBJEXT) igor-Errorrate.$(OBJEXT) \
	igor-ExtractFeatures.$(OBJEXT) igor-Genechoice.$(OBJEXT) \
	igor-GenModel.$(OBJEXT) \
	igor-HypermutationfullNmererrorrate.$(OBJEXT) \
	igor-Hypermutationglobalerrorrate.$(OBJEXT) \
	igor-Insertion.$(OBJEXT) igor-IntStr.$(OBJEXT) \
	igor-Model_marginals.$(OBJEXT) igor-Model_Parms.$(OBJEXT) \
	igor-Pgencounter.$(OBJEXT) igor-Rec_Event.$(OBJEXT) \
	igor-Singleerrorrate.$(OBJEXT) igor-Utils.$(OBJEXT)
am_igor_OBJECTS = $(am__objects_1) igor-main.$(OBJEXT)
igor_OBJECTS = $(am_igor_OBJECTS)
igor_DEPENDENCIES = ../libs/gsl_sub/libgsl_sub.la \
	../libs/jemalloc/lib/libjemalloc.a
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
igor_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(igor_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/igor-Aligner.Po \
	./$(DEPDIR)/igor-Bestscenarioscounter.Po \
	./$(DEPDIR)/igor-CDR3SeqData.Po ./$(DEPDIR)/igor-Counter.Po \
	./$(DEPDIR)/igor-Coverageerrcounter.Po \
	./$(DEPDIR)/igor-Deletion.Po ./$(DEPDIR)/igor-Dinuclmarkov.Po \
	./$(DEPDIR)/igor-Errorrate.Po \
	./$(DEPDIR)/igor-Errorscounter.Po \
	./$(DEPDIR)/igor-ExtractFeatures.Po \
	./$(DEPDIR)/igor-GenModel.Po ./$(DEPDIR)/igor-Genechoice.Po \
	./$(DEPDIR)/igor-HypermutationfullNmererrorrate.Po \
	./$(DEPDIR)/igor-Hypermutationglobalerrorrate.Po \
	./$(DEPDIR)/igor-Insertion.Po ./$(DEPDIR)/igor-IntStr.Po \
	./$(DEPDIR)/igor-Model_Parms.Po \
	./$(DEPDIR)/igor-Model_marginals.Po \
	./$(DEPDIR)/igor-Pgencounter.Po ./$(DEPDIR)/igor-Rec_Event.Po \
	./$(DEPDIR)/igor-Singleerrorrate.Po ./$(DEPDIR)/igor-Utils.Po \
	./$(DEPDIR)/igor-main.Po
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
DIST_SOURCES = $(igor_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/jrb/enpicom-local/code/IGoR/missing aclocal-1.16
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = ar
AUTOCONF = ${SHELL} /home/jrb/enpicom-local/code/IGoR/missing autoconf
AUTOHEADER = ${SHELL} /home/jrb/enpicom-local/code/IGoR/missing autoheader
AUTOMAKE = ${SHELL} /home/jrb/enpicom-local/code/IGoR/missing automake-1.16
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
GREP = /usr/bin/grep
HAVE_CXX11 = 1
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/jrb/enpicom-local/code/IGoR/missing makeinfo
MANIFEST_TOOL = :
MKDIR_P = /usr/bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPENMP_CXXFLAGS = -fopenmp
OTOOL = 
OTOOL64 = 
PACKAGE = igor
PACKAGE_BUGREPORT = quentin.marcou@lpt.ens.fr
PACKAGE_NAME = igor
PACKAGE_STRING = igor 1.4.0
PACKAGE_TARNAME = igor
PACKAGE_URL = https://github.com/qmarcou/IGoR
PACKAGE_VERSION = 1.4.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 1.4.0
abs_builddir = /home/jrb/enpicom-local/code/IGoR/igor_src
abs_srcdir = /home/jrb/enpicom-local/code/IGoR/igor_src
abs_top_builddir = /home/jrb/enpicom-local/code/IGoR
abs_top_srcdir = /home/jrb/enpicom-local/code/IGoR
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/jrb/enpicom-local/code/IGoR/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
subdirs =  libs/gsl_sub libs/jemalloc igor_src
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
ACLOCAL_AMFLAGS = -I ../m4

# List all Igor sources
SOURCES = Aligner.cpp Aligner.h Bestscenarioscounter.cpp Bestscenarioscounter.h CDR3SeqData.h CDR3SeqData.cpp Counter.cpp Counter.h Coverageerrcounter.cpp Coverageerrcounter.h Deletion.cpp Deletion.h Dinuclmarkov.cpp Dinuclmarkov.h Errorscounter.cpp Errorscounter.h Errorrate.cpp Errorrate.h ExtractFeatures.h ExtractFeatures.cpp Genechoice.cpp Genechoice.h GenModel.cpp GenModel.h HypermutationfullNmererrorrate.cpp HypermutationfullNmererrorrate.h Hypermutationglobalerrorrate.cpp Hypermutationglobalerrorrate.h Insertion.cpp Insertion.h IntStr.cpp IntStr.h Model_marginals.cpp Model_marginals.h Model_Parms.cpp Model_Parms.h Pgencounter.cpp Pgencounter.h Rec_Event.cpp Rec_Event.h Singleerrorrate.cpp Singleerrorrate.h Utils.cpp Utils.h
igor_SOURCES = $(SOURCES) main.cpp

# Include GSL subparts and jemalloc without installation
igor_LDADD = ../libs/gsl_sub/libgsl_sub.la ../libs/jemalloc/lib/libjemalloc.a -lpthread -ldl #Need to link pthread since it is not statically linked with jemalloc (for now)
igor_CXXFLAGS = -I$(srcdir)/../libs/jemalloc/include/jemalloc -I$(srcdir)/../libs/gsl_sub $(OPENMP_CXXFLAGS) -DIGOR_DATA_DIR=\"$(pkgdatadir)\"
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign igor_src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign igor_src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

igor$(EXEEXT): $(igor_OBJECTS) $(igor_DEPENDENCIES) $(EXTRA_igor_DEPENDENCIES) 
	@rm -f igor$(EXEEXT)
	$(AM_V_CXXLD)$(igor_LINK) $(igor_OBJECTS) $(igor_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/igor-Aligner.Po # am--include-marker
include ./$(DEPDIR)/igor-Bestscenarioscounter.Po # am--include-marker
include ./$(DEPDIR)/igor-CDR3SeqData.Po # am--include-marker
include ./$(DEPDIR)/igor-Counter.Po # am--include-marker
include ./$(DEPDIR)/igor-Coverageerrcounter.Po # am--include-marker
include ./$(DEPDIR)/igor-Deletion.Po # am--include-marker
include ./$(DEPDIR)/igor-Dinuclmarkov.Po # am--include-marker
include ./$(DEPDIR)/igor-Errorrate.Po # am--include-marker
include ./$(DEPDIR)/igor-Errorscounter.Po # am--include-marker
include ./$(DEPDIR)/igor-ExtractFeatures.Po # am--include-marker
include ./$(DEPDIR)/igor-GenModel.Po # am--include-marker
include ./$(DEPDIR)/igor-Genechoice.Po # am--include-marker
include ./$(DEPDIR)/igor-HypermutationfullNmererrorrate.Po # am--include-marker
include ./$(DEPDIR)/igor-Hypermutationglobalerrorrate.Po # am--include-marker
include ./$(DEPDIR)/igor-Insertion.Po # am--include-marker
include ./$(DEPDIR)/igor-IntStr.Po # am--include-marker
include ./$(DEPDIR)/igor-Model_Parms.Po # am--include-marker
include ./$(DEPDIR)/igor-Model_marginals.Po # am--include-marker
include ./$(DEPDIR)/igor-Pgencounter.Po # am--include-marker
include ./$(DEPDIR)/igor-Rec_Event.Po # am--include-marker
include ./$(DEPDIR)/igor-Singleerrorrate.Po # am--include-marker
include ./$(DEPDIR)/igor-Utils.Po # am--include-marker
include ./$(DEPDIR)/igor-main.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

igor-Aligner.o: Aligner.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Aligner.o -MD -MP -MF $(DEPDIR)/igor-Aligner.Tpo -c -o igor-Aligner.o `test -f 'Aligner.cpp' || echo '$(srcdir)/'`Aligner.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Aligner.Tpo $(DEPDIR)/igor-Aligner.Po
#	$(AM_V_CXX)source='Aligner.cpp' object='igor-Aligner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Aligner.o `test -f 'Aligner.cpp' || echo '$(srcdir)/'`Aligner.cpp

igor-Aligner.obj: Aligner.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Aligner.obj -MD -MP -MF $(DEPDIR)/igor-Aligner.Tpo -c -o igor-Aligner.obj `if test -f 'Aligner.cpp'; then $(CYGPATH_W) 'Aligner.cpp'; else $(CYGPATH_W) '$(srcdir)/Aligner.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Aligner.Tpo $(DEPDIR)/igor-Aligner.Po
#	$(AM_V_CXX)source='Aligner.cpp' object='igor-Aligner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Aligner.obj `if test -f 'Aligner.cpp'; then $(CYGPATH_W) 'Aligner.cpp'; else $(CYGPATH_W) '$(srcdir)/Aligner.cpp'; fi`

igor-Bestscenarioscounter.o: Bestscenarioscounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Bestscenarioscounter.o -MD -MP -MF $(DEPDIR)/igor-Bestscenarioscounter.Tpo -c -o igor-Bestscenarioscounter.o `test -f 'Bestscenarioscounter.cpp' || echo '$(srcdir)/'`Bestscenarioscounter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Bestscenarioscounter.Tpo $(DEPDIR)/igor-Bestscenarioscounter.Po
#	$(AM_V_CXX)source='Bestscenarioscounter.cpp' object='igor-Bestscenarioscounter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Bestscenarioscounter.o `test -f 'Bestscenarioscounter.cpp' || echo '$(srcdir)/'`Bestscenarioscounter.cpp

igor-Bestscenarioscounter.obj: Bestscenarioscounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Bestscenarioscounter.obj -MD -MP -MF $(DEPDIR)/igor-Bestscenarioscounter.Tpo -c -o igor-Bestscenarioscounter.obj `if test -f 'Bestscenarioscounter.cpp'; then $(CYGPATH_W) 'Bestscenarioscounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Bestscenarioscounter.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Bestscenarioscounter.Tpo $(DEPDIR)/igor-Bestscenarioscounter.Po
#	$(AM_V_CXX)source='Bestscenarioscounter.cpp' object='igor-Bestscenarioscounter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Bestscenarioscounter.obj `if test -f 'Bestscenarioscounter.cpp'; then $(CYGPATH_W) 'Bestscenarioscounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Bestscenarioscounter.cpp'; fi`

igor-CDR3SeqData.o: CDR3SeqData.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-CDR3SeqData.o -MD -MP -MF $(DEPDIR)/igor-CDR3SeqData.Tpo -c -o igor-CDR3SeqData.o `test -f 'CDR3SeqData.cpp' || echo '$(srcdir)/'`CDR3SeqData.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-CDR3SeqData.Tpo $(DEPDIR)/igor-CDR3SeqData.Po
#	$(AM_V_CXX)source='CDR3SeqData.cpp' object='igor-CDR3SeqData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-CDR3SeqData.o `test -f 'CDR3SeqData.cpp' || echo '$(srcdir)/'`CDR3SeqData.cpp

igor-CDR3SeqData.obj: CDR3SeqData.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-CDR3SeqData.obj -MD -MP -MF $(DEPDIR)/igor-CDR3SeqData.Tpo -c -o igor-CDR3SeqData.obj `if test -f 'CDR3SeqData.cpp'; then $(CYGPATH_W) 'CDR3SeqData.cpp'; else $(CYGPATH_W) '$(srcdir)/CDR3SeqData.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-CDR3SeqData.Tpo $(DEPDIR)/igor-CDR3SeqData.Po
#	$(AM_V_CXX)source='CDR3SeqData.cpp' object='igor-CDR3SeqData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-CDR3SeqData.obj `if test -f 'CDR3SeqData.cpp'; then $(CYGPATH_W) 'CDR3SeqData.cpp'; else $(CYGPATH_W) '$(srcdir)/CDR3SeqData.cpp'; fi`

igor-Counter.o: Counter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Counter.o -MD -MP -MF $(DEPDIR)/igor-Counter.Tpo -c -o igor-Counter.o `test -f 'Counter.cpp' || echo '$(srcdir)/'`Counter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Counter.Tpo $(DEPDIR)/igor-Counter.Po
#	$(AM_V_CXX)source='Counter.cpp' object='igor-Counter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Counter.o `test -f 'Counter.cpp' || echo '$(srcdir)/'`Counter.cpp

igor-Counter.obj: Counter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Counter.obj -MD -MP -MF $(DEPDIR)/igor-Counter.Tpo -c -o igor-Counter.obj `if test -f 'Counter.cpp'; then $(CYGPATH_W) 'Counter.cpp'; else $(CYGPATH_W) '$(srcdir)/Counter.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Counter.Tpo $(DEPDIR)/igor-Counter.Po
#	$(AM_V_CXX)source='Counter.cpp' object='igor-Counter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Counter.obj `if test -f 'Counter.cpp'; then $(CYGPATH_W) 'Counter.cpp'; else $(CYGPATH_W) '$(srcdir)/Counter.cpp'; fi`

igor-Coverageerrcounter.o: Coverageerrcounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Coverageerrcounter.o -MD -MP -MF $(DEPDIR)/igor-Coverageerrcounter.Tpo -c -o igor-Coverageerrcounter.o `test -f 'Coverageerrcounter.cpp' || echo '$(srcdir)/'`Coverageerrcounter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Coverageerrcounter.Tpo $(DEPDIR)/igor-Coverageerrcounter.Po
#	$(AM_V_CXX)source='Coverageerrcounter.cpp' object='igor-Coverageerrcounter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Coverageerrcounter.o `test -f 'Coverageerrcounter.cpp' || echo '$(srcdir)/'`Coverageerrcounter.cpp

igor-Coverageerrcounter.obj: Coverageerrcounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Coverageerrcounter.obj -MD -MP -MF $(DEPDIR)/igor-Coverageerrcounter.Tpo -c -o igor-Coverageerrcounter.obj `if test -f 'Coverageerrcounter.cpp'; then $(CYGPATH_W) 'Coverageerrcounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Coverageerrcounter.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Coverageerrcounter.Tpo $(DEPDIR)/igor-Coverageerrcounter.Po
#	$(AM_V_CXX)source='Coverageerrcounter.cpp' object='igor-Coverageerrcounter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Coverageerrcounter.obj `if test -f 'Coverageerrcounter.cpp'; then $(CYGPATH_W) 'Coverageerrcounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Coverageerrcounter.cpp'; fi`

igor-Deletion.o: Deletion.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Deletion.o -MD -MP -MF $(DEPDIR)/igor-Deletion.Tpo -c -o igor-Deletion.o `test -f 'Deletion.cpp' || echo '$(srcdir)/'`Deletion.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Deletion.Tpo $(DEPDIR)/igor-Deletion.Po
#	$(AM_V_CXX)source='Deletion.cpp' object='igor-Deletion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Deletion.o `test -f 'Deletion.cpp' || echo '$(srcdir)/'`Deletion.cpp

igor-Deletion.obj: Deletion.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Deletion.obj -MD -MP -MF $(DEPDIR)/igor-Deletion.Tpo -c -o igor-Deletion.obj `if test -f 'Deletion.cpp'; then $(CYGPATH_W) 'Deletion.cpp'; else $(CYGPATH_W) '$(srcdir)/Deletion.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Deletion.Tpo $(DEPDIR)/igor-Deletion.Po
#	$(AM_V_CXX)source='Deletion.cpp' object='igor-Deletion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Deletion.obj `if test -f 'Deletion.cpp'; then $(CYGPATH_W) 'Deletion.cpp'; else $(CYGPATH_W) '$(srcdir)/Deletion.cpp'; fi`

igor-Dinuclmarkov.o: Dinuclmarkov.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Dinuclmarkov.o -MD -MP -MF $(DEPDIR)/igor-Dinuclmarkov.Tpo -c -o igor-Dinuclmarkov.o `test -f 'Dinuclmarkov.cpp' || echo '$(srcdir)/'`Dinuclmarkov.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Dinuclmarkov.Tpo $(DEPDIR)/igor-Dinuclmarkov.Po
#	$(AM_V_CXX)source='Dinuclmarkov.cpp' object='igor-Dinuclmarkov.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Dinuclmarkov.o `test -f 'Dinuclmarkov.cpp' || echo '$(srcdir)/'`Dinuclmarkov.cpp

igor-Dinuclmarkov.obj: Dinuclmarkov.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Dinuclmarkov.obj -MD -MP -MF $(DEPDIR)/igor-Dinuclmarkov.Tpo -c -o igor-Dinuclmarkov.obj `if test -f 'Dinuclmarkov.cpp'; then $(CYGPATH_W) 'Dinuclmarkov.cpp'; else $(CYGPATH_W) '$(srcdir)/Dinuclmarkov.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Dinuclmarkov.Tpo $(DEPDIR)/igor-Dinuclmarkov.Po
#	$(AM_V_CXX)source='Dinuclmarkov.cpp' object='igor-Dinuclmarkov.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Dinuclmarkov.obj `if test -f 'Dinuclmarkov.cpp'; then $(CYGPATH_W) 'Dinuclmarkov.cpp'; else $(CYGPATH_W) '$(srcdir)/Dinuclmarkov.cpp'; fi`

igor-Errorscounter.o: Errorscounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Errorscounter.o -MD -MP -MF $(DEPDIR)/igor-Errorscounter.Tpo -c -o igor-Errorscounter.o `test -f 'Errorscounter.cpp' || echo '$(srcdir)/'`Errorscounter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Errorscounter.Tpo $(DEPDIR)/igor-Errorscounter.Po
#	$(AM_V_CXX)source='Errorscounter.cpp' object='igor-Errorscounter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Errorscounter.o `test -f 'Errorscounter.cpp' || echo '$(srcdir)/'`Errorscounter.cpp

igor-Errorscounter.obj: Errorscounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Errorscounter.obj -MD -MP -MF $(DEPDIR)/igor-Errorscounter.Tpo -c -o igor-Errorscounter.obj `if test -f 'Errorscounter.cpp'; then $(CYGPATH_W) 'Errorscounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Errorscounter.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Errorscounter.Tpo $(DEPDIR)/igor-Errorscounter.Po
#	$(AM_V_CXX)source='Errorscounter.cpp' object='igor-Errorscounter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Errorscounter.obj `if test -f 'Errorscounter.cpp'; then $(CYGPATH_W) 'Errorscounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Errorscounter.cpp'; fi`

igor-Errorrate.o: Errorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Errorrate.o -MD -MP -MF $(DEPDIR)/igor-Errorrate.Tpo -c -o igor-Errorrate.o `test -f 'Errorrate.cpp' || echo '$(srcdir)/'`Errorrate.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Errorrate.Tpo $(DEPDIR)/igor-Errorrate.Po
#	$(AM_V_CXX)source='Errorrate.cpp' object='igor-Errorrate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Errorrate.o `test -f 'Errorrate.cpp' || echo '$(srcdir)/'`Errorrate.cpp

igor-Errorrate.obj: Errorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Errorrate.obj -MD -MP -MF $(DEPDIR)/igor-Errorrate.Tpo -c -o igor-Errorrate.obj `if test -f 'Errorrate.cpp'; then $(CYGPATH_W) 'Errorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/Errorrate.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Errorrate.Tpo $(DEPDIR)/igor-Errorrate.Po
#	$(AM_V_CXX)source='Errorrate.cpp' object='igor-Errorrate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Errorrate.obj `if test -f 'Errorrate.cpp'; then $(CYGPATH_W) 'Errorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/Errorrate.cpp'; fi`

igor-ExtractFeatures.o: ExtractFeatures.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-ExtractFeatures.o -MD -MP -MF $(DEPDIR)/igor-ExtractFeatures.Tpo -c -o igor-ExtractFeatures.o `test -f 'ExtractFeatures.cpp' || echo '$(srcdir)/'`ExtractFeatures.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-ExtractFeatures.Tpo $(DEPDIR)/igor-ExtractFeatures.Po
#	$(AM_V_CXX)source='ExtractFeatures.cpp' object='igor-ExtractFeatures.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-ExtractFeatures.o `test -f 'ExtractFeatures.cpp' || echo '$(srcdir)/'`ExtractFeatures.cpp

igor-ExtractFeatures.obj: ExtractFeatures.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-ExtractFeatures.obj -MD -MP -MF $(DEPDIR)/igor-ExtractFeatures.Tpo -c -o igor-ExtractFeatures.obj `if test -f 'ExtractFeatures.cpp'; then $(CYGPATH_W) 'ExtractFeatures.cpp'; else $(CYGPATH_W) '$(srcdir)/ExtractFeatures.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-ExtractFeatures.Tpo $(DEPDIR)/igor-ExtractFeatures.Po
#	$(AM_V_CXX)source='ExtractFeatures.cpp' object='igor-ExtractFeatures.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-ExtractFeatures.obj `if test -f 'ExtractFeatures.cpp'; then $(CYGPATH_W) 'ExtractFeatures.cpp'; else $(CYGPATH_W) '$(srcdir)/ExtractFeatures.cpp'; fi`

igor-Genechoice.o: Genechoice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Genechoice.o -MD -MP -MF $(DEPDIR)/igor-Genechoice.Tpo -c -o igor-Genechoice.o `test -f 'Genechoice.cpp' || echo '$(srcdir)/'`Genechoice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Genechoice.Tpo $(DEPDIR)/igor-Genechoice.Po
#	$(AM_V_CXX)source='Genechoice.cpp' object='igor-Genechoice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Genechoice.o `test -f 'Genechoice.cpp' || echo '$(srcdir)/'`Genechoice.cpp

igor-Genechoice.obj: Genechoice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Genechoice.obj -MD -MP -MF $(DEPDIR)/igor-Genechoice.Tpo -c -o igor-Genechoice.obj `if test -f 'Genechoice.cpp'; then $(CYGPATH_W) 'Genechoice.cpp'; else $(CYGPATH_W) '$(srcdir)/Genechoice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Genechoice.Tpo $(DEPDIR)/igor-Genechoice.Po
#	$(AM_V_CXX)source='Genechoice.cpp' object='igor-Genechoice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Genechoice.obj `if test -f 'Genechoice.cpp'; then $(CYGPATH_W) 'Genechoice.cpp'; else $(CYGPATH_W) '$(srcdir)/Genechoice.cpp'; fi`

igor-GenModel.o: GenModel.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-GenModel.o -MD -MP -MF $(DEPDIR)/igor-GenModel.Tpo -c -o igor-GenModel.o `test -f 'GenModel.cpp' || echo '$(srcdir)/'`GenModel.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-GenModel.Tpo $(DEPDIR)/igor-GenModel.Po
#	$(AM_V_CXX)source='GenModel.cpp' object='igor-GenModel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-GenModel.o `test -f 'GenModel.cpp' || echo '$(srcdir)/'`GenModel.cpp

igor-GenModel.obj: GenModel.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-GenModel.obj -MD -MP -MF $(DEPDIR)/igor-GenModel.Tpo -c -o igor-GenModel.obj `if test -f 'GenModel.cpp'; then $(CYGPATH_W) 'GenModel.cpp'; else $(CYGPATH_W) '$(srcdir)/GenModel.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-GenModel.Tpo $(DEPDIR)/igor-GenModel.Po
#	$(AM_V_CXX)source='GenModel.cpp' object='igor-GenModel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-GenModel.obj `if test -f 'GenModel.cpp'; then $(CYGPATH_W) 'GenModel.cpp'; else $(CYGPATH_W) '$(srcdir)/GenModel.cpp'; fi`

igor-HypermutationfullNmererrorrate.o: HypermutationfullNmererrorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-HypermutationfullNmererrorrate.o -MD -MP -MF $(DEPDIR)/igor-HypermutationfullNmererrorrate.Tpo -c -o igor-HypermutationfullNmererrorrate.o `test -f 'HypermutationfullNmererrorrate.cpp' || echo '$(srcdir)/'`HypermutationfullNmererrorrate.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-HypermutationfullNmererrorrate.Tpo $(DEPDIR)/igor-HypermutationfullNmererrorrate.Po
#	$(AM_V_CXX)source='HypermutationfullNmererrorrate.cpp' object='igor-HypermutationfullNmererrorrate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-HypermutationfullNmererrorrate.o `test -f 'HypermutationfullNmererrorrate.cpp' || echo '$(srcdir)/'`HypermutationfullNmererrorrate.cpp

igor-HypermutationfullNmererrorrate.obj: HypermutationfullNmererrorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-HypermutationfullNmererrorrate.obj -MD -MP -MF $(DEPDIR)/igor-HypermutationfullNmererrorrate.Tpo -c -o igor-HypermutationfullNmererrorrate.obj `if test -f 'HypermutationfullNmererrorrate.cpp'; then $(CYGPATH_W) 'HypermutationfullNmererrorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/HypermutationfullNmererrorrate.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-HypermutationfullNmererrorrate.Tpo $(DEPDIR)/igor-HypermutationfullNmererrorrate.Po
#	$(AM_V_CXX)source='HypermutationfullNmererrorrate.cpp' object='igor-HypermutationfullNmererrorrate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-HypermutationfullNmererrorrate.obj `if test -f 'HypermutationfullNmererrorrate.cpp'; then $(CYGPATH_W) 'HypermutationfullNmererrorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/HypermutationfullNmererrorrate.cpp'; fi`

igor-Hypermutationglobalerrorrate.o: Hypermutationglobalerrorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Hypermutationglobalerrorrate.o -MD -MP -MF $(DEPDIR)/igor-Hypermutationglobalerrorrate.Tpo -c -o igor-Hypermutationglobalerrorrate.o `test -f 'Hypermutationglobalerrorrate.cpp' || echo '$(srcdir)/'`Hypermutationglobalerrorrate.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Hypermutationglobalerrorrate.Tpo $(DEPDIR)/igor-Hypermutationglobalerrorrate.Po
#	$(AM_V_CXX)source='Hypermutationglobalerrorrate.cpp' object='igor-Hypermutationglobalerrorrate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Hypermutationglobalerrorrate.o `test -f 'Hypermutationglobalerrorrate.cpp' || echo '$(srcdir)/'`Hypermutationglobalerrorrate.cpp

igor-Hypermutationglobalerrorrate.obj: Hypermutationglobalerrorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Hypermutationglobalerrorrate.obj -MD -MP -MF $(DEPDIR)/igor-Hypermutationglobalerrorrate.Tpo -c -o igor-Hypermutationglobalerrorrate.obj `if test -f 'Hypermutationglobalerrorrate.cpp'; then $(CYGPATH_W) 'Hypermutationglobalerrorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/Hypermutationglobalerrorrate.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Hypermutationglobalerrorrate.Tpo $(DEPDIR)/igor-Hypermutationglobalerrorrate.Po
#	$(AM_V_CXX)source='Hypermutationglobalerrorrate.cpp' object='igor-Hypermutationglobalerrorrate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Hypermutationglobalerrorrate.obj `if test -f 'Hypermutationglobalerrorrate.cpp'; then $(CYGPATH_W) 'Hypermutationglobalerrorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/Hypermutationglobalerrorrate.cpp'; fi`

igor-Insertion.o: Insertion.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Insertion.o -MD -MP -MF $(DEPDIR)/igor-Insertion.Tpo -c -o igor-Insertion.o `test -f 'Insertion.cpp' || echo '$(srcdir)/'`Insertion.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Insertion.Tpo $(DEPDIR)/igor-Insertion.Po
#	$(AM_V_CXX)source='Insertion.cpp' object='igor-Insertion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Insertion.o `test -f 'Insertion.cpp' || echo '$(srcdir)/'`Insertion.cpp

igor-Insertion.obj: Insertion.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Insertion.obj -MD -MP -MF $(DEPDIR)/igor-Insertion.Tpo -c -o igor-Insertion.obj `if test -f 'Insertion.cpp'; then $(CYGPATH_W) 'Insertion.cpp'; else $(CYGPATH_W) '$(srcdir)/Insertion.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Insertion.Tpo $(DEPDIR)/igor-Insertion.Po
#	$(AM_V_CXX)source='Insertion.cpp' object='igor-Insertion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Insertion.obj `if test -f 'Insertion.cpp'; then $(CYGPATH_W) 'Insertion.cpp'; else $(CYGPATH_W) '$(srcdir)/Insertion.cpp'; fi`

igor-IntStr.o: IntStr.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-IntStr.o -MD -MP -MF $(DEPDIR)/igor-IntStr.Tpo -c -o igor-IntStr.o `test -f 'IntStr.cpp' || echo '$(srcdir)/'`IntStr.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-IntStr.Tpo $(DEPDIR)/igor-IntStr.Po
#	$(AM_V_CXX)source='IntStr.cpp' object='igor-IntStr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-IntStr.o `test -f 'IntStr.cpp' || echo '$(srcdir)/'`IntStr.cpp

igor-IntStr.obj: IntStr.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-IntStr.obj -MD -MP -MF $(DEPDIR)/igor-IntStr.Tpo -c -o igor-IntStr.obj `if test -f 'IntStr.cpp'; then $(CYGPATH_W) 'IntStr.cpp'; else $(CYGPATH_W) '$(srcdir)/IntStr.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-IntStr.Tpo $(DEPDIR)/igor-IntStr.Po
#	$(AM_V_CXX)source='IntStr.cpp' object='igor-IntStr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-IntStr.obj `if test -f 'IntStr.cpp'; then $(CYGPATH_W) 'IntStr.cpp'; else $(CYGPATH_W) '$(srcdir)/IntStr.cpp'; fi`

igor-Model_marginals.o: Model_marginals.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Model_marginals.o -MD -MP -MF $(DEPDIR)/igor-Model_marginals.Tpo -c -o igor-Model_marginals.o `test -f 'Model_marginals.cpp' || echo '$(srcdir)/'`Model_marginals.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Model_marginals.Tpo $(DEPDIR)/igor-Model_marginals.Po
#	$(AM_V_CXX)source='Model_marginals.cpp' object='igor-Model_marginals.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Model_marginals.o `test -f 'Model_marginals.cpp' || echo '$(srcdir)/'`Model_marginals.cpp

igor-Model_marginals.obj: Model_marginals.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Model_marginals.obj -MD -MP -MF $(DEPDIR)/igor-Model_marginals.Tpo -c -o igor-Model_marginals.obj `if test -f 'Model_marginals.cpp'; then $(CYGPATH_W) 'Model_marginals.cpp'; else $(CYGPATH_W) '$(srcdir)/Model_marginals.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Model_marginals.Tpo $(DEPDIR)/igor-Model_marginals.Po
#	$(AM_V_CXX)source='Model_marginals.cpp' object='igor-Model_marginals.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Model_marginals.obj `if test -f 'Model_marginals.cpp'; then $(CYGPATH_W) 'Model_marginals.cpp'; else $(CYGPATH_W) '$(srcdir)/Model_marginals.cpp'; fi`

igor-Model_Parms.o: Model_Parms.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Model_Parms.o -MD -MP -MF $(DEPDIR)/igor-Model_Parms.Tpo -c -o igor-Model_Parms.o `test -f 'Model_Parms.cpp' || echo '$(srcdir)/'`Model_Parms.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Model_Parms.Tpo $(DEPDIR)/igor-Model_Parms.Po
#	$(AM_V_CXX)source='Model_Parms.cpp' object='igor-Model_Parms.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Model_Parms.o `test -f 'Model_Parms.cpp' || echo '$(srcdir)/'`Model_Parms.cpp

igor-Model_Parms.obj: Model_Parms.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Model_Parms.obj -MD -MP -MF $(DEPDIR)/igor-Model_Parms.Tpo -c -o igor-Model_Parms.obj `if test -f 'Model_Parms.cpp'; then $(CYGPATH_W) 'Model_Parms.cpp'; else $(CYGPATH_W) '$(srcdir)/Model_Parms.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Model_Parms.Tpo $(DEPDIR)/igor-Model_Parms.Po
#	$(AM_V_CXX)source='Model_Parms.cpp' object='igor-Model_Parms.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Model_Parms.obj `if test -f 'Model_Parms.cpp'; then $(CYGPATH_W) 'Model_Parms.cpp'; else $(CYGPATH_W) '$(srcdir)/Model_Parms.cpp'; fi`

igor-Pgencounter.o: Pgencounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Pgencounter.o -MD -MP -MF $(DEPDIR)/igor-Pgencounter.Tpo -c -o igor-Pgencounter.o `test -f 'Pgencounter.cpp' || echo '$(srcdir)/'`Pgencounter.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Pgencounter.Tpo $(DEPDIR)/igor-Pgencounter.Po
#	$(AM_V_CXX)source='Pgencounter.cpp' object='igor-Pgencounter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Pgencounter.o `test -f 'Pgencounter.cpp' || echo '$(srcdir)/'`Pgencounter.cpp

igor-Pgencounter.obj: Pgencounter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Pgencounter.obj -MD -MP -MF $(DEPDIR)/igor-Pgencounter.Tpo -c -o igor-Pgencounter.obj `if test -f 'Pgencounter.cpp'; then $(CYGPATH_W) 'Pgencounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Pgencounter.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Pgencounter.Tpo $(DEPDIR)/igor-Pgencounter.Po
#	$(AM_V_CXX)source='Pgencounter.cpp' object='igor-Pgencounter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Pgencounter.obj `if test -f 'Pgencounter.cpp'; then $(CYGPATH_W) 'Pgencounter.cpp'; else $(CYGPATH_W) '$(srcdir)/Pgencounter.cpp'; fi`

igor-Rec_Event.o: Rec_Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Rec_Event.o -MD -MP -MF $(DEPDIR)/igor-Rec_Event.Tpo -c -o igor-Rec_Event.o `test -f 'Rec_Event.cpp' || echo '$(srcdir)/'`Rec_Event.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Rec_Event.Tpo $(DEPDIR)/igor-Rec_Event.Po
#	$(AM_V_CXX)source='Rec_Event.cpp' object='igor-Rec_Event.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Rec_Event.o `test -f 'Rec_Event.cpp' || echo '$(srcdir)/'`Rec_Event.cpp

igor-Rec_Event.obj: Rec_Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Rec_Event.obj -MD -MP -MF $(DEPDIR)/igor-Rec_Event.Tpo -c -o igor-Rec_Event.obj `if test -f 'Rec_Event.cpp'; then $(CYGPATH_W) 'Rec_Event.cpp'; else $(CYGPATH_W) '$(srcdir)/Rec_Event.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Rec_Event.Tpo $(DEPDIR)/igor-Rec_Event.Po
#	$(AM_V_CXX)source='Rec_Event.cpp' object='igor-Rec_Event.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Rec_Event.obj `if test -f 'Rec_Event.cpp'; then $(CYGPATH_W) 'Rec_Event.cpp'; else $(CYGPATH_W) '$(srcdir)/Rec_Event.cpp'; fi`

igor-Singleerrorrate.o: Singleerrorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Singleerrorrate.o -MD -MP -MF $(DEPDIR)/igor-Singleerrorrate.Tpo -c -o igor-Singleerrorrate.o `test -f 'Singleerrorrate.cpp' || echo '$(srcdir)/'`Singleerrorrate.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Singleerrorrate.Tpo $(DEPDIR)/igor-Singleerrorrate.Po
#	$(AM_V_CXX)source='Singleerrorrate.cpp' object='igor-Singleerrorrate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Singleerrorrate.o `test -f 'Singleerrorrate.cpp' || echo '$(srcdir)/'`Singleerrorrate.cpp

igor-Singleerrorrate.obj: Singleerrorrate.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Singleerrorrate.obj -MD -MP -MF $(DEPDIR)/igor-Singleerrorrate.Tpo -c -o igor-Singleerrorrate.obj `if test -f 'Singleerrorrate.cpp'; then $(CYGPATH_W) 'Singleerrorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/Singleerrorrate.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Singleerrorrate.Tpo $(DEPDIR)/igor-Singleerrorrate.Po
#	$(AM_V_CXX)source='Singleerrorrate.cpp' object='igor-Singleerrorrate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Singleerrorrate.obj `if test -f 'Singleerrorrate.cpp'; then $(CYGPATH_W) 'Singleerrorrate.cpp'; else $(CYGPATH_W) '$(srcdir)/Singleerrorrate.cpp'; fi`

igor-Utils.o: Utils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Utils.o -MD -MP -MF $(DEPDIR)/igor-Utils.Tpo -c -o igor-Utils.o `test -f 'Utils.cpp' || echo '$(srcdir)/'`Utils.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Utils.Tpo $(DEPDIR)/igor-Utils.Po
#	$(AM_V_CXX)source='Utils.cpp' object='igor-Utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Utils.o `test -f 'Utils.cpp' || echo '$(srcdir)/'`Utils.cpp

igor-Utils.obj: Utils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-Utils.obj -MD -MP -MF $(DEPDIR)/igor-Utils.Tpo -c -o igor-Utils.obj `if test -f 'Utils.cpp'; then $(CYGPATH_W) 'Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/Utils.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-Utils.Tpo $(DEPDIR)/igor-Utils.Po
#	$(AM_V_CXX)source='Utils.cpp' object='igor-Utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-Utils.obj `if test -f 'Utils.cpp'; then $(CYGPATH_W) 'Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/Utils.cpp'; fi`

igor-main.o: main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-main.o -MD -MP -MF $(DEPDIR)/igor-main.Tpo -c -o igor-main.o `test -f 'main.cpp' || echo '$(srcdir)/'`main.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-main.Tpo $(DEPDIR)/igor-main.Po
#	$(AM_V_CXX)source='main.cpp' object='igor-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-main.o `test -f 'main.cpp' || echo '$(srcdir)/'`main.cpp

igor-main.obj: main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -MT igor-main.obj -MD -MP -MF $(DEPDIR)/igor-main.Tpo -c -o igor-main.obj `if test -f 'main.cpp'; then $(CYGPATH_W) 'main.cpp'; else $(CYGPATH_W) '$(srcdir)/main.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/igor-main.Tpo $(DEPDIR)/igor-main.Po
#	$(AM_V_CXX)source='main.cpp' object='igor-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(igor_CXXFLAGS) $(CXXFLAGS) -c -o igor-main.obj `if test -f 'main.cpp'; then $(CYGPATH_W) 'main.cpp'; else $(CYGPATH_W) '$(srcdir)/main.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/igor-Aligner.Po
	-rm -f ./$(DEPDIR)/igor-Bestscenarioscounter.Po
	-rm -f ./$(DEPDIR)/igor-CDR3SeqData.Po
	-rm -f ./$(DEPDIR)/igor-Counter.Po
	-rm -f ./$(DEPDIR)/igor-Coverageerrcounter.Po
	-rm -f ./$(DEPDIR)/igor-Deletion.Po
	-rm -f ./$(DEPDIR)/igor-Dinuclmarkov.Po
	-rm -f ./$(DEPDIR)/igor-Errorrate.Po
	-rm -f ./$(DEPDIR)/igor-Errorscounter.Po
	-rm -f ./$(DEPDIR)/igor-ExtractFeatures.Po
	-rm -f ./$(DEPDIR)/igor-GenModel.Po
	-rm -f ./$(DEPDIR)/igor-Genechoice.Po
	-rm -f ./$(DEPDIR)/igor-HypermutationfullNmererrorrate.Po
	-rm -f ./$(DEPDIR)/igor-Hypermutationglobalerrorrate.Po
	-rm -f ./$(DEPDIR)/igor-Insertion.Po
	-rm -f ./$(DEPDIR)/igor-IntStr.Po
	-rm -f ./$(DEPDIR)/igor-Model_Parms.Po
	-rm -f ./$(DEPDIR)/igor-Model_marginals.Po
	-rm -f ./$(DEPDIR)/igor-Pgencounter.Po
	-rm -f ./$(DEPDIR)/igor-Rec_Event.Po
	-rm -f ./$(DEPDIR)/igor-Singleerrorrate.Po
	-rm -f ./$(DEPDIR)/igor-Utils.Po
	-rm -f ./$(DEPDIR)/igor-main.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/igor-Aligner.Po
	-rm -f ./$(DEPDIR)/igor-Bestscenarioscounter.Po
	-rm -f ./$(DEPDIR)/igor-CDR3SeqData.Po
	-rm -f ./$(DEPDIR)/igor-Counter.Po
	-rm -f ./$(DEPDIR)/igor-Coverageerrcounter.Po
	-rm -f ./$(DEPDIR)/igor-Deletion.Po
	-rm -f ./$(DEPDIR)/igor-Dinuclmarkov.Po
	-rm -f ./$(DEPDIR)/igor-Errorrate.Po
	-rm -f ./$(DEPDIR)/igor-Errorscounter.Po
	-rm -f ./$(DEPDIR)/igor-ExtractFeatures.Po
	-rm -f ./$(DEPDIR)/igor-GenModel.Po
	-rm -f ./$(DEPDIR)/igor-Genechoice.Po
	-rm -f ./$(DEPDIR)/igor-HypermutationfullNmererrorrate.Po
	-rm -f ./$(DEPDIR)/igor-Hypermutationglobalerrorrate.Po
	-rm -f ./$(DEPDIR)/igor-Insertion.Po
	-rm -f ./$(DEPDIR)/igor-IntStr.Po
	-rm -f ./$(DEPDIR)/igor-Model_Parms.Po
	-rm -f ./$(DEPDIR)/igor-Model_marginals.Po
	-rm -f ./$(DEPDIR)/igor-Pgencounter.Po
	-rm -f ./$(DEPDIR)/igor-Rec_Event.Po
	-rm -f ./$(DEPDIR)/igor-Singleerrorrate.Po
	-rm -f ./$(DEPDIR)/igor-Utils.Po
	-rm -f ./$(DEPDIR)/igor-main.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am uninstall-binPROGRAMS

.PRECIOUS: Makefile


# Pass IGoR data install directory path through the compiler with -DIGOR_DATA_DIR=\"$(pkgdatadir)\"
# and not in config.h (as it is best practice according to: https://stackoverflow.com/questions/5867136/autoconf-how-to-get-installation-paths-into-config-h#11317815)

#igor_AM_CPPFLAGS = -std=c++11 -I$(srcdir)/../libs/gsl_sub 
#igor_AM_CXXFLAGS = -I$(srcdir)/../libs/jemalloc/include/jemalloc $(OPENMP_CXXFLAGS)
#igor_AM_CFLAGS = $(OPENMP_CXXFLAGS)
# Compile using c++11 and include headers from $(srcdir)/../libs/gsl_sub to mimick the use of normal GSL and include it using #<gsl/gsl_foo.h>
#-I$(srcdir)/../libs/jemalloc doesn't really need to have the headers #-fopenMP would not work on every compiler, using AC_OPENMP macro instead

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
